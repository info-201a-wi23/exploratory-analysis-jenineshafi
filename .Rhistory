<<<<<<< HEAD
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths, na.rm = T))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% filter(deaths == max(deaths, na.rm = T)) %>% pull(location)
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
new_cases <- national %>% mutate(new_cases = cases-lag(cases))
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = cases-lag(cases))
View(national)
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = deaths - lag(deaths))
View(national)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases = max(new_cases)) %>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases)) %>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases))%>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases))%>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases, na.rm = T))%>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases, na.rm = T)) %>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases, na.rm = T))
View(date_most_cases)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(cases == max(new_cases,na.rm = T))
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases,na.rm = T))
View(date_most_cases)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases,na.rm = T)) %>% pull(date)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases,na.rm = T))
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths))
View(date_most_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths))
View(date_most_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths==max(new_deaths))
View(date_most_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths))
View(date_most_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = T))
View(date_most_deaths)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = T)) %>% pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(most_deaths == max(new_deaths))
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(new_deaths == max(new_deaths))
View(most_deaths)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = T))
View(most_deaths)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = T)) %>% pull(new_deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases <- states %>% filter(cases == max(cases)) %>% pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == max(date)) %>% filter(cases == min(cases)) %>% pull(cases)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% mutate(highest_num_in_counties= group_by(state,cases(filter(cases = max(cases)))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% mutate(highest_num_in_counties= group_by(state, cases) %>% (filter(cases = max(cases)))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% mutate(highest_cases_in)each_state= group_by(state, cases) %>% (filter(cases = max(cases)))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% mutate(highest_cases_in_each_state= group_by(state, cases) %>% (filter(cases = max(cases)))
help("group_by")
help("group_by")
highest_cases_in_each_state <- counties %>% group_by(state,cases) %>% filter(cases = max(cases))
highest_cases_in_each_state <- counties %>% group_by(state,cases) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>% mutate(high = (group_by(state,cases)) %>% filter(cases == max(cases))
highest_cases_in_each_state <- counties %>% (group_by(state,cases)) %>% filter(cases == max(cases))
highest_cases_in_each_state <- states %>% (group_by(state,cases)) %>% filter(cases == max(cases))
highest_cases_in_each_state <- states %>% (group_by(states ,cases)) %>% filter(cases == max(cases))
highest_cases_in_each_state <- states %>% (group_by(states ,cases)) %>% filter(cases == max(cases))
highest_cases_in_each_state <- states %>% (group_by(states ,cases)) %>% filter(cases = max(cases))
highest_cases_in_each_state <- states %>% (group_by(states ,cases)) %>% filter(cases = max(cases, na.rm = F))
home_owner <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/home_owner.csv')
race_wealth <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/race_wealth.csv')
# Load relevant libraries
library(dplyr)
View(race_wealth)
# To answer this question, we first need to filter the data for "Average" (not "Median") family wealth
# Then we need to make a new dataframe from race_wealth with the average family wealth per year for all races
# Save this as `total_avg_wealth`
total_avg_wealth %>% race_wealth %>% group_by(year) %>% summarize(avg_fam_wealth = mean(wealth_family))
race_wealth <- read.csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-09/race_wealth.csv')
# To answer this question, we first need to filter the data for "Average" (not "Median") family wealth
# Then we need to make a new dataframe from race_wealth with the average family wealth per year for all races
# Save this as `total_avg_wealth`
total_avg_wealth %>% race_wealth %>% group_by(year) %>% summarize(avg_fam_wealth = mean(wealth_family))
# To answer this question, we first need to filter the data for "Average" (not "Median") family wealth
# Then we need to make a new dataframe from race_wealth with the average family wealth per year for all races
# Save this as `total_avg_wealth`
total_avg_wealth <- race_wealth %>% group_by(year) %>% summarize(avg_fam_wealth = mean(wealth_family))
View(total_avg_wealth)
# To answer this question, we first need to filter the data for "Average" (not "Median") family wealth
# Then we need to make a new dataframe from race_wealth with the average family wealth per year for all races
# Save this as `total_avg_wealth`
total_avg_wealth <- race_wealth %>% group_by(year) %>% summarize(avg_fam_wealth = mean(wealth_family, na.rm = T))
library(ggplot2)
# Now let's make a scatter plot of total average family wealth over time
ggplot(total_avg_wealth)+ geom_point(mapping = aes(x = year, y = avg_fam_wealth))
ggplot(total_avg_wealth)+ geom_point(mapping = aes(x = year, y = avg_fam_wealth))+ geom_line(mapping = aes(x = year, y = avg_fam_wealth))
avg_race_wealth <- race_wealth %>% group_by(race) %>% summarize(average = mean(wealth_family, na.rm = T))
View(avg_race_wealth)
avg_race_wealth <- race_wealth %>% group_by(race, year) %>% summarize(average = mean(wealth_family, na.rm = T))
View(avg_race_wealth)
ggplot(avg_race_wealth)+geom_point(mapping = aes(x= year, y = average))+geom_line(mapping = aes( x= year, y= average, color = race))
View(home_owner)
homeowners <- home_owner %>% group_by(race, year)
View(homeowners)
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pt, color = race))
homeowners <- home_owner %>% group_by(race, year)
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pt, color = race))
ggplot(home_owner) + geom_line(mapping = aes(x = year, y = home_owner_pt, color = race))
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pct, color = race))
# Let's make a line plot of average family wealth over time by race
ggplot(avg_race_wealth)+geom_point(mapping = aes(x= year, y = average))+geom_line(mapping = aes( x= year, y= average, color = race))
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pct, na.rm = T, color = race))
# Let's make a line plot of average family wealth over time by race
ggplot(avg_race_wealth)+geom_point(mapping = aes(x= year, y = average))+geom_line(mapping = aes( x= year, y= average, color = race))
total_avg_wealth <- race_wealth %>% filter(type == "Average") %>% group_by(year) %>% summarize(avg_fam_wealth = mean(wealth_family, na.rm = T))
ggplot(total_avg_wealth)+ geom_point(mapping = aes(x = year, y = avg_fam_wealth))+ geom_line(mapping = aes(x = year, y = avg_fam_wealth))
avg_race_wealth <- race_wealth %>% filter(type== "Average")
View(avg_race_wealth)
# Let's make a line plot of average family wealth over time by race
ggplot(avg_race_wealth)+geom_point(mapping = aes(x= year, y = wealth_family, color= race))+geom_line(mapping = aes( x= year, y= wealth_family, color = race))
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pct, color = race))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% filter(states) %>% group_by(county) %>% summariaze(high_cases_in_county = max(cases, na.rm = T))
# 1.a Load the tidyverse package and the dplyr package
library(dplyr)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% filter(states) %>% group_by(county) %>% summariaze(high_cases_in_county = max(cases, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% filter(states) %>% group_by(county) %>% summarize(high_cases_in_county = max(cases, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% filter(type == states) %>% group_by(county) %>% summarize(high_cases_in_county = max(cases, na.rm = T))
View(counties)
View(states)
View(national)
View(counties)
View(total_avg_wealth)
View(race_wealth)
View(counties)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(counties_with_most_cases = max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(counties_with_most_cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(location) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(location) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(county) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases)) %>% pull(cases)
county_with_most_cases <- counties %>% group_by(location) %>% filter(case==max(cases))
county_with_most_cases <- counties %>% group_by(location) %>% filter(case==max(cases, na.rm = T))
county_with_most_cases <- counties %>% group_by(location) %>% filter(cases==max(cases, na.rm = T))
View(county_with_most_cases)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% summarize(max = max(cases))
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(location) %>% summarize(max = max(cases))
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(location) %>% filter(max = max(cases))
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(location) %>% filter(max == max(cases))
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(location) %>% filter(cases == max(cases))
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state, county) %>% filter(cases == max(cases))
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(location) %>% filter(cases == max(cases))
View(counties)
View(counties)
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(date == max(date, na.rm = T) %>% filter(cases == max(cases)) %>% pull(location)
highest_cases_in_each_state <- counties %>%
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% pull(location)
print(highest_cases_in_each_state)
View(counties)
View(counties)
View(counties)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% select(county, state, cases, deaths, locations)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% select(county, state, cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest+deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(county, state, cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(county, state, cases, deaths, location)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(county, cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(county,cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(date, county,cases, deaths, location)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% select(county, state, cases, deaths, location)
View(highest_cases_in_each_state)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% select(date,county, state, cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths)) %>% select(date, county,cases, deaths, location)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% select(date, county,cases, deaths, location)
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% select(date, county,cases, deaths, location)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarize(tot_case_per_county = sum(cases)) %>% select(date, county,state,fips,cases,deaths,location)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarize(tot_case_per_county = sum(cases)) %>% select(date, county,state,fips,cases,deaths,location)
View(national)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties, by = "date")
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarize(tot_case_per_county = sum(cases)) %>% select(date, county,state,fips,cases,deaths,location)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <-
#what is an equal function????
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <-
#what is an equal function????
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarize(tot_case_per_county = sum(cases)) %>% select(date, county,state,fips,cases,deaths,location)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date, county) %>% summarize(tot_case_per_county = sum(cases)) %>% select(date, county,state,fips,cases,deaths,location)
total_cases_counties <- counties %>% select(date, county,cases)
View(total_cases_counties)
total_cases_counties <- counties %>% select(date, county,cases) %>%
group_by(date, county) %>% summarize(tot_case_per_county = sum(cases))
View(total_cases_counties)
View(total_cases_counties)
View(total_cases_counties)
counties %>% filter(date==max(date))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% select(date, county,cases) %>%
group_by(date, county) %>% summarize(tot_case_per_county = sum(cases))
View(total_cases_counties)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties, by = "date")
View(all_totals)
View(national)
View(all_totals)
View(all_totals)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% filter(cases != county_total_cases)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% select(date, county,cases) %>%
group_by(date, county) %>% summarize(count_tatal_cases = sum(cases))
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% filter(cases != county_total_cases)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% select(date, county,cases) %>%
group_by(date, county) %>% summarize(county_total_cases = sum(cases))
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% filter(cases != county_total_cases)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties, by = "date")
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% filter(cases != county_total_cases)
View(national_county_diff)
View(national)
View(counties)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
my_answer <- counties %>% group_by(location, date) %>% summarize(covid_having_people = cases-deaths)
View(my_answer)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
my_answer <- counties %>% group_by(location, date) %>% filter(date == max(date)) %>% summarize(covid_having_people = cases-deaths)
View(my_answer)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(national_county_diff)
View(total_cases_counties)
View(all_totals)
View(national)
View(all_totals)
View(lowest_deaths_in_each_state)
# Now plot the average IMDB rating for each season as a scatterplot, a line plot, or both
# Your ggplot code here
ggplot(raing_per_season) + geom_line(mapping = aes(x = Season, y = avg_rating))
library("ggplot2")
# Load library
library("dplyr")
# Now plot the average IMDB rating for each season as a scatterplot, a line plot, or both
# Your ggplot code here
ggplot(raing_per_season) + geom_line(mapping = aes(x = Season, y = avg_rating))
# Now plot the average IMDB rating for each season as a scatterplot, a line plot, or both
# Your ggplot code here
ggplot(rating_per_season) + geom_line(mapping = aes(x = Season, y = avg_rating))
# Which season of The Office was the best?
# Calculate the average IMDB rating for each season
rating_per_season <- office_df %>% group_by(Season) %>% summarize(avg_rating = mean(Rating, na.rm = T))
office_df$AirDate<- as.Date(office_df$AirDate)
# Load The Office data from this URL:
# https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/TheOfficeIMDBPerEpisode.csv
# This data is drawn from Kaggle: https://www.kaggle.com/datasets/kapastor/the-office-imdb-ratings-per-episode
office_df <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/TheOfficeIMDBPerEpisode.csv", stringsAsFactors = F)
office_df$AirDate<- as.Date(office_df$AirDate)
# Which season of The Office was the best?
# Calculate the average IMDB rating for each season
rating_per_season <- office_df %>% group_by(Season) %>% summarize(avg_rating = mean(Rating, na.rm = T))
# Now plot the average IMDB rating for each season as a scatterplot, a line plot, or both
# Your ggplot code here
ggplot(rating_per_season) + geom_line(mapping = aes(x = Season, y = avg_rating))
# Find the highest IMDB rating for any episode of The Office and pull the value
highest_rating <- office_df %>% summarize(highest_rating = max(Rating)) %>% pull(max_rating)
# Find the highest IMDB rating for any episode of The Office and pull the value
highest_rating <- office_df %>% summarize(highest_rating = max(Rating)) %>% pull(highest)
View(office_df)
# Find the highest IMDB rating for any episode of The Office and pull the value
highest_rating <- office_df %>% summarize(highest_rating = max(Rating)) %>% pull(highest_rating)
# Find the highest IMDB rating for any episode of The Office and pull the value
highest_rating <- office_df %>% summarize(highest_rating = max(Rating)) %>% pull(highest_rating)
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest_rating ==  min(Rating, na.rm = T)) %>% pull(lowest_rating)
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest_rating ==  min(Rating, na.rm = T)) %>% pull(lowest_rating)
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest ==  min(Rating, na.rm = T)) %>% pull(lowest)
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest =  min(Rating, na.rm = T)) %>% pull(lowest)
```
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest =  min(Rating) %>% pull(lowest)
```
The highest IMDB rating for any episode of The Office is `r highest_rating`, and the lowest rating is `r lowest_rating`.
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest =  min(Rating)) %>% pull(lowest)
```
# Find the lowest IMDB rating for any episode of The Office and pull the value
lowest_rating <- office_df %>% summarize(lowest = min(Rating)) %>% pull(lowest)
```
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% select(date, county,cases) %>%
group_by(date, county) %>% summarize(county_total_cases = sum(cases))
View(all_totals)
View(total_cases_counties)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(total_cases_counties)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(national_county_diff)
View(all_totals)
View(counties)
View(total_cases_counties)
ggplot(homeowners) + geom_line(mapping = aes(x = year, y = home_owner_pct, color = race))
library(tidyverse)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = F)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
View(national)
View(counties)
View(states)
View(counties)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% summarize(tot_cases = max(cases)) %>% pull(tot_cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>% filter(date == max(date)) %>% summarize(tot_deaths = max(deaths)) %>% pull(tot_deaths)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(date == max(date)) %>% summarize(tot_cases = max(cases)) %>% pull(tot_cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% summarize(highest_case = max(cases)) %>% pull(highest_case)
View(states)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_ratios <- states %>% mutate(ratio_d_c = deaths/cases)
View(state_ratios)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == max(date)) %>% filter(cases == min(cases)) %>% pull(state)
View(counties)
View(national)
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = cases-lag(cases))
View(national)
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = deaths - lag(deaths))
View(national)
View(national)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases,na.rm = T)) %>% pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>% filter(new_deaths == max(new_deaths, na.rm = T)) %>% pull(date)
View(national)
highest_cases_in_each_state <- counties %>% filter(date == max(date, na.rm = T)) %>% group_by(state) %>% filter(cases == max(cases)) %>% select(date,county, state, cases, deaths, location)
View(highest_cases_in_each_state)
View(highest_cases_in_each_state)
View(lowest_deaths_in_each_state)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(my_answer)
View(counties)
View(my_answer)
View(counties)
styler:::style_selection()
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity")
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
maternal <- read.csv("https://github.com/info-201a-wi23/exploratory-analysis-jenineshafi/blob/8816defdef8e1717500a0364d3a430c7041d7ac7/Maternal%20Health%20Risk%20Data%20Set%20(1).csv", stringsAsFactors = F),
maternal <- read.csv("https://github.com/info-201a-wi23/exploratory-analysis-jenineshafi/blob/8816defdef8e1717500a0364d3a430c7041d7ac7/Maternal%20Health%20Risk%20Data%20Set%20(1).csv", stringsAsFactors = F)
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
library(ggplot2)
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
maternal_risk <- read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = F)
setwd("C:/Users/stlp/Desktop/INFO-201/Final Project/exploratory-analysis-jenineshafi")
maternal_risk <- read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = F)
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
ggplot(maternal_risk, aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
ggplot(maternal_risk)+ (aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
View(maternal_risk)
ggplot(maternal_risk)+ (aes(fill=condition, x= RiskLevel, y=count)+geom_point(position = "stack", stat = "identity"))
ggplot(maternal_risk)+ (aes(fill=condition, x= RiskLevel, y=Age)+geom_point(position = "stack", stat = "identity"))
ggplot(maternal_risk)+ (aes(fill=condition, x= Age, y=RiskLevel)+geom_point(position = "stack", stat = "identity"))
library(ggplot2)
np_data <-read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = F)
=======
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(month == str_sub("-01-", start = 5L, end = 8L))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(month == str_sub(01, start = 6L, end = 7L))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = (filter(date == str_sub(01, start = 6L, end = 7L))))
rlang::last_error()
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = (filter(date == str_sub(01, start = 6L, end = 7L))))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate("january" = (filter(date == str_sub(01, start = 6L, end = 7L))))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = (filter(date == str_sub(01, start = 6L, end = 7L))))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = (filter(date == str_sub(01, start = 6L, end = 7L))))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january = filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january =
filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>% filter(date == str_sub(2020, start = 1L, end = 4L)) %>% mutate(january = filter(date == str_sub(01, start = 6L, end = 7L)))
View(month_highest_cases)
View(month_highest_cases)
?mutate
rlang::last_error()
rlang::last_trace()
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january =
filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january =
filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(january =
filter(date == str_sub(01, start = 6L, end = 6L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L))
month_highest_cases
View(all_totals)
View(all_totals)
View(counties)
View(counties)
View(total_cases_counties)
View(total_cases_counties)
total_cases_counties <- counties %>%
select(date, county, cases) %>%
group_by(date, county) %>%
mutate(date = date, county_total_cases = (sum(cases))) %>%
unique()
View(total_cases_counties)
View(total_cases_counties)
total_cases_counties <- counties %>%
group_by(date, county) %>%
mutate(date = date, county_total_cases = (sum(cases))) %>%
unique()
total_cases_counties <- counties %>%
group_by(date, county) %>%
mutate(date = date, county_total_cases = (sum(cases)))
total_cases_counties <- counties %>%
group_by(date, county) %>%
mutate(date = date, county_total_cases = (summarize(sum = sum(cases))))
total_cases_counties <- counties %>%
group_by(date, county) %>%
summarize(county_total_cases = sum(cases))
total_cases_counties <- counties %>%
group_by(date, county) %>%
summarize(county_total_cases = sum(cases))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(total_cases_counties, national, by = "date")
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
all_totals <- left_join(total_cases_counties, national, by = "date")
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
num_national_county_diff <- nrow(national_county_diff)
View(national_county_diff)
View(national_county_diff)
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L))
month_highest_cases <- national %>%
mutate(year = filter(date == str_sub(2020, start = 1L, end = 4L)))
month_highest_cases <- national %>%
mutate(year = (filter(date == str_sub(2020, start = 1L, end = 4L))))
library("stringr")
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
mutate(month = filter(date == str_sub(01, start = 6L, end = 7L)))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L)) %>%
filter(max == max(cases, na.rm = TRUE)) %>%
pull(cases)
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 7L))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 6L, end = 6L))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 7L, end = 7L))
month_highest_cases <- national %>%
select(date, cases) %>%
filter(date == str_sub(2020, start = 1L, end = 4L))
month_highest_cases <- national %>%
filter(date == str_sub(2020, start = 1L, end = 4L))
month_highest_cases <- national %>%
filter(date == str_sub(date, start = 1L, end = 4L))
?str_sub
month_highest_cases <- national %>%
filter(date == "2020")
month_highest_cases <- national %>%
filter(date == "2020-01-21")
month_highest_cases <- national %>%
filter(date == "2020-01-")
?filter
month_highest_cases <- national %>%
filter(date == between(date, 2020-01-21, 2020-01-31))
month_highest_cases <- national %>%
filter(date == between(date, "2020-01-21", "2020-01-31"))
month_highest_cases <- national %>%
filter(date >= 2020-01-21 & date <= 2020-01-31)
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-01-31")
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-12-31")
month_highest_cases <- national %>%
mutate(january = filter(date >= "2020-01-21" & date <= "2020-12-31"))
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-12-31") %>%
filter(date >= "2020-01-21" & date <= "2020-01-31")
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-12-31") %>%
filter(date >= "2020-01-21" & date <= "2020-01-31")
filter(max == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
select(date, cases)
filter(date >= "2020-01-21" & date <= "2020-12-31") %>%
filter(date >= "2020-01-21" & date <= "2020-01-31")
month_highest_cases <- national %>%
select(date, cases)
month_highest_cases <- national %>%
select(date, cases)
filter(date >= "2020-01-21" & date <= "2020-12-31")
month_highest_cases <- national %>%
select(date, cases)
filter(date >= "2020-01-21" & date <= "2020-01-31")
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-01-31")
month_highest_cases <- national %>%
filter(date >= "2020-01-21" & date <= "2020-01-31") %>%
filter(max == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31")
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(max == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(max == max(cases))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(cases == max(cases))
month_highest_cases <- national %>%
filter(date == str_sub(date, start = 1L, end = 4L)) %>%
filter(date == str_sub(01, start = 7L, end = 7L)) %>%
filter(cases == max(cases, na.rm = TRUE))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(cases == max(cases))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
mutate(max = filter(cases == max(cases)))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(cases == max(cases))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31")
?group_by
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_sub(2022-01, start = 1L, end = 7L))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_sub("2022-01", start = 1L, end = 7L))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31")
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[01]{2}"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[-01-]{2}"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "\-[01]{2}\-"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[1\-]{2}"))
library("stringr")
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[1\-]{2}"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[1\-]{2}"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "\\-[01]{2}\\-"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31") %>%
filter(date == str_subset(date, "[1\\-]{2}"))
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-12-31")
month_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
filter(cases == max(cases))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
filter(cases == max(cases))
feb_highest_cases <- national %>%
filter(date >= "2022-02-02" & date <= "2022-02-28") %>%
filter(cases == max(cases))
View(feb_highest_cases)
View(feb_highest_cases)
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
filter(cases == max(cases))
feb_highest_cases <- national %>%
filter(date >= "2022-02-01" & date <= "2022-02-28") %>%
filter(cases == max(cases))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
filter(cases == max(cases))
feb_highest_cases <- national %>%
filter(date >= "2022-02-01" & date <= "2022-02-28") %>%
filter(cases == max(cases))
mar_highest_cases <- national %>%
filter(date >= "2022-03-01" & date <= "2022-03-31") %>%
filter(cases == max(cases))
apr_highest_cases <- national %>%
filter(date >= "2022-04-01" & date <= "2022-04-30") %>%
filter(cases == max(cases))
may_highest_cases <- national %>%
filter(date >= "2022-05-01" & date <= "2022-05-31") %>%
filter(cases == max(cases))
jun_highest_cases <- national %>%
filter(date >= "2022-06-01" & date <= "2022-06-30") %>%
filter(cases == max(cases))
jul_highest_cases <- national %>%
filter(date >= "2022-07-01" & date <= "2022-07-31") %>%
filter(cases == max(cases))
aug_highest_cases <- national %>%
filter(date >= "2022-08-01" & date <= "2022-08-31") %>%
filter(cases == max(cases))
sep_highest_cases <- national %>%
filter(date >= "2022-09-01" & date <= "2022-09-30") %>%
filter(cases == max(cases))
oct_highest_cases <- national %>%
filter(date >= "2022-10-01" & date <= "2022-10-31") %>%
filter(cases == max(cases))
nov_highest_cases <- national %>%
filter(date >= "2022-11-01" & date <= "2022-11-30") %>%
filter(cases == max(cases))
dec_highest_cases <- national %>%
filter(date >= "2022-12-01" & date <= "2022-12-31") %>%
filter(cases == max(cases))
year_highest_cases <- data.frame(jan_highest_cases, feb_highest_cases, mar_highest_cases)
View(year_highest_cases)
View(year_highest_cases)
year_highest_cases <- data.frame(2022 = c(jan_highest_cases, feb_highest_cases, mar_highest_cases))
year_highest_cases <- data.frame(year = c(jan_highest_cases, feb_highest_cases, mar_highest_cases))
View(year_highest_cases)
View(year_highest_cases)
df <- merge(jan_highest_cases, feb_highest_cases)
View(df)
View(df)
df <- merge(jan_highest_cases, feb_highest_cases, by = "date")
View(jan_highest_cases)
View(jan_highest_cases)
df <- rbind(jan_highest_cases, feb_highest_cases, mar_highest_cases)
View(df)
View(df)
year_highest_cases <- rbind(jan_highest_cases, feb_highest_cases,
mar_highest_cases, apr_highest_cases,
may_highest_cases, jun_highest_cases,
jul_highest_cases, aug_highest_cases,
sep_highest_cases, oct_highest_cases,
nov_highest_cases, dec_highest_cases)
?rbind
my_answer <- year_highest_cases %>%
filter(cases == max(cases))
pull(date)
View(my_answer)
View(my_answer)
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
mutate(jan_cases = summarize(diff(date = "2022-01-01", date = "2022-01-31")))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
mutate(jan_cases = summarize(diff = diff(date = "2022-01-01", date = "2022-01-31")))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31")
?diff
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
summarize(jan_cases = diff(cases))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31")
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
summarize(jan_cases = diff(1:31))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31")
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
summarize(jan_cases = diff(cases, 1:31))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31")
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31") %>%
summarize(jan_cases = diff(1:31))
jan_highest_cases <- national %>%
filter(date >= "2022-01-01" & date <= "2022-01-31")
march_beginning <- national %>%
filter(date = "2020-03-31" & date = "2021-03-31" & date = "2022-03-31")
march_beginning <- national %>%
filter(date = "2020-03-31")
march_beginning <- national %>%
filter(date == "2020-03-31" & date == "2021-03-31" & date == "2022-03-31")
View(march_beginning)
View(march_beginning)
march_beginning <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" | date == "2022-03-31")
march_beginning <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" | date == "2022-03-31")
pull(new_cases)
march_new_cases <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" | date == "2022-03-31")
pull(new_cases)
march_new_cases <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" | date == "2022-03-31") %>%
pull(new_cases)
march_new_cases <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" | date == "2022-03-31") %>%
pull(date, new_cases)
march_new_cases
obs_national <- nrow(national) # There are 1,107 rows in this dataset
obs_states <- nrow(states) # There are 59,086 rows in this dataset
obs_counties <- nrow(counties)
num_features_national <- ncol(national) # There are 5 columns in this dataset
num_features_states <- ncol(states) # There are 5 columns in this dataset
num_features_counties <- ncol(counties)
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
# There were 102,070,172 total U.S. cases
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(deaths)
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
# California has the highest number of cases
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
# The highest number of cases in a state is 11,983,239
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(deaths_per_cases = deaths / cases) %>%
filter(deaths_per_cases == max(deaths_per_cases,
na.rm = TRUE)) %>%
pull(state)
state_lowest_cases <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
pull(state)
county_highest_cases <- counties %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(county)
num_highest_cases_county <- counties %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
counties <- counties %>%
mutate(location = toupper(paste0(county, ", ", state)))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = TRUE)) %>%
pull(location)
national <- national %>%
mutate(new_cases = (cases - lag(cases)))
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_deaths = (deaths - lag(deaths)))
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <-  national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# The most new deaths in the U.S. occurred on 2022-11-11
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(location)
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
pull(location)
total_cases_counties <- counties %>%
group_by(date, county) %>%
summarize(county_total_cases = sum(cases))
all_totals <- left_join(total_cases_counties, national, by = "date")
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
march_new_cases <- national %>%
filter(date == "2020-03-31" | date == "2021-03-31" |
date == "2022-03-31") %>%
pull(date, new_cases)
march_new_cases
lintr:::addin_lint()
lintr:::addin_lint()
data <-  read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = FALSE)
data <-  read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = FALSE)
setwd("C:/Users/jshaf/Documents/INFO201/Final Project/exploratory-analysis-jenineshafi")
data <-  read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = FALSE)
View(data)
View(data)
maternal_risk <- read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = FALSE)
>>>>>>> 29da6e1c456495643e6759c4a53dec2685fcfbd4
