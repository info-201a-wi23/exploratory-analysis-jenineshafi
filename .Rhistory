)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
geom_point(data = park_locations,
mapping = aes(
x = long,
y = lat,
),
color = "red") +
coord_map() +
blank_theme
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
# To make a blank theme, you can create a custom theme like so, and then add it to the bottom of your ggplot
# Try it out!
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank(), # remove border around plot
)
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
geom_point(data = park_locations,
mapping = aes(
x = long,
y = lat,
),
color = "red") +
coord_map() +
blank_theme
# Exercise 1: Map every National Park on top of state map, and change the color of the points
# Hint: longitude and latitude should be your x, y values...
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
# Then map National Park locations as points on top
geom_point(data = park_locations,
mapping = aes(
x = long,
y = lat,
),
color = "red") +
coord_map() +
blank_theme
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>%
group_by(state_fullname) %>%
summarize(state_total = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape,
np_state_data,
by = c("region" = "state_fullname"))
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
?label_number_si()
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
scale_fill_continuous(low = 'yellow',
high = 'red',
labels = label_number_si()) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# Exercise 1: Make a new dataframe of the total recreation visits for each state (by full name)
# Save as np_state_data
np_state_data <- np_data %>%
group_by(state_fullname) %>%
summarize(state_total = sum(RecreationVisits))
# Exercise 2: Join the `state_shape` and `np_state_data` dataframes
# Save as np_state_shape_data
np_state_shape_data <- left_join(state_shape,
np_state_data,
by = c("region" = "state_fullname"))
# Exercise 3: Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
library("scales")
?label_number_si()
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
scale_fill_continuous(low = 'yellow',
high = 'red',
labels = label_number_si()) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/Downloads/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/Desktop/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("Users/amylho/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~/Downlaods/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("Macintosh HD/Users/amylho/Downloads/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv",
stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("C:/Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("C:/Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
setwd("/Users/amylho/Desktop")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("~Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
View(spl_df)
# Exercise 2: We want to create a new date column ("date") with the month AND year and a default first day of the month
# Make a new column with checkout month, checkout year, and a default day value ("01") *pasted* together like so: 2020-10-01
# Then convert that column to a date value
spl_df <- spl_df %>%
mutate(date = paste0(CheckoutYear, "-" CheckoutMonth, "-01"))
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
spl_df$date <- as.Date(spl_df$date, format = "%Y-%m-%d")
# Exercise 2: We want to create a new date column ("date") with the month AND year and a default first day of the month
# Make a new column with checkout month, checkout year, and a default day value ("01") *pasted* together like so: 2020-10-01
# Then convert that column to a date value
spl_df <- spl_df %>%
mutate(date = paste0(CheckoutYear, "-", CheckoutMonth, "-01"))
spl_df$date <- as.Date(spl_df$date, format = "%Y-%m-%d")
author_df <- spl_df %>%
filter(str_detect(Creator, "Stephen")) %>%
filter(str_detect(Creator, "King"))
checkouts_per_month <- author_df %>% group_by(date) %>% summarize(total_checkouts =
sum(Checkouts, na.rm = TRUE))
checkouts_per_month
ggplot(checkouts_per_month) +
geom_line(aes(x = date, y = total_checkouts)) +
scale_y_continuous(limits = c(0, 2000)) +
labs(title = "Stephen King Checkouts 2022",
x = "Month",
y = "Total Checkouts")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("/Users/amylho/Desktop/2022-2023-All-Checkouts-SPL-Data.csv", stringsAsFactors = FALSE)
spl_df <- spl_df %>%
mutate(date = paste0(CheckoutYear, "-", CheckoutMonth, "-01"))
spl_df$date <- as.Date(spl_df$date, format = "%Y-%m-%d")
author_df <- spl_df %>%
filter(str_detect(Creator, "Stephen")) %>%
filter(str_detect(Creator, "King"))
checkouts_per_month <- author_df %>% group_by(date) %>% summarize(total_checkouts =
sum(Checkouts, na.rm = TRUE))
checkouts_per_month
ggplot(checkouts_per_month) +
geom_line(aes(x = date, y = total_checkouts)) +
scale_y_continuous(limits = c(0, 2000)) +
labs(title = "Stephen King Checkouts 2022",
x = "Month",
y = "Total Checkouts")
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
scale_fill_continuous(low = 'yellow',
high = 'red',
labels = label_number_si()) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
library(ggplot2)
setwd("~/INFO201")
maternal_risk <- read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = F)
setwd("/Users/amylho/Documents/INFO201/exploratory-analysis-jenineshafi")
maternal_risk <- read.csv("Maternal Health Risk Data Set (1).csv", stringsAsFactors = F)
View(maternal_risk)
library(dplyr)
maternal_table <- table(maternal_risk %>%
group_by(Age) %>%
summarize(mean = mean(RiskLevel)))
View(maternal_risk)
View(maternal_table)
summary_info$max_value <- maternal_risk %>%
filter(Age == max(Age, na.rm = T)) %>%
select(RiskLevel)
summary_info <- list()
summary_info$max_value <- maternal_risk %>%
filter(Age == max(Age, na.rm = T)) %>%
select(RiskLevel)
View(summary_info)
View(summary_info[["max_value"]])
View(summary_info)
summary_info <- list()
summary_info$num_observations <- nrow(maternal_risk)
summary_info$max_value <- maternal_risk %>%
filter(Age == max(Age, na.rm = T)) %>%
select(Age)
View(summary_info)
summary_info$min_Age <- maternal_risk %>%
filter(Age == min(Age, na.rm = TRUE)) %>%
select(Age)
# Find the highest age of maternal risk
summary_info$max_Age <- maternal_risk %>%
filter(Age == max(Age, na.rm = TRUE)) %>%
select(Age)
# Find the average age of maternal risk
summary_info$avg_age <- maternal_risk %>%
select(Age) %>%
summarize(mean = mean(Age))
summarize(mean = mean(BS))
# Find the average heart rate of maternal risk
summary_info$avg_HeartRate <- maternal_risk %>%
select(HeartRate) %>%
summarize(mean = mean(HeartRate))
#Find the average BS of maternal risk
summary_info$avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean = mean(BS))
View(summary_info[["avg_BS"]])
summary_info$min_Age <- maternal_risk %>%
select("Age", "Risk Level") %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE)) %>%
select(Age)
summary_info$min_Age <- maternal_risk %>%
select("Age", "Risk Level") %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE)) %>%
select(Age)
summary_info$min_Age <- maternal_risk %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE)) %>%
select("Age", "Risk Level") %>%
View(summary_info[["min_Age"]])
# Find the
summary_info$RiskLevel <- maternal_risk %>%
select(RiskLevel) %>%
min_Age <- maternal_risk %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE)) %>%
filter(Age == max(Age, na.rm = T)) %>%
select(Age)
min_Age <- maternal_risk %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE))
View(min_Age)
min_Age <- maternal_risk %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE))
select("Age", "Risk Level") %>%
min_Age <- maternal_risk %>%
filter("Risk Level" == min("Risk Level", na.rm = TRUE))
select("Age", "Risk Level") %>%
pull(Age)
min_Age <- maternal_risk %>%
filter(Age == min(Age, na.rm = TRUE)) %>%
select(Age)
View(min_Age)
avg_age <- maternal_risk %>% group_by(Age)
summarize(mean_age = mean(Age),
.groups = 'drop')
avg_age <- maternal_risk %>% group_by(Age)
summarize(mean_age = mean(Age), .groups = 'drop')
avg_age <- maternal_risk %>% group_by(Age)
summarize(mean_age = mean(Age), groups = 'drop')
avg_age <- maternal_risk %>%
group_by(Age) %>%
summarize(mean_age = mean(Age), groups = 'drop')
View(avg_age)
avg_age <- maternal_risk %>%
group_by(Age) %>%
summarize(mean_age = mean(Age), .groups = 'drop')
View(avg_age)
avg_BS <- maternal_risk %>%
group_by(BS) %>%
summarize(mean_BS = mean(BS))
View(avg_BS)
summary_info[["avg_BS"]][["mean"]]
View(summary_info[["avg_BS"]])
avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean_BS = mean(BS))
pull(mean_BS)
avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean = mean(BS))
pull(mean_BS)
avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean = mean(BS))
pull()
avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean = mean(BS))
View(avg_BS)
View(avg_age)
View(min_Age)
summarize(mean = mean(Age)
avg_age <- maternal_risk %>%
avg_BS <- maternal_risk %>%
select(BS) %>%
summarize(mean = mean(BS))
avg_age <- maternal_risk %>%
select(Age) %>%
summarize(mean = mean(Age))
View(avg_age)
avg_HeartRate <- maternal_risk %>%
select(HeartRate) %>%
summarize(mean = mean(HeartRate))
RiskLevel <- maternal_risk %>%
select(RiskLevel) %>%
View(avg_HeartRate)
View(avg_HeartRate)
summary_info <- list()
summary_info$min_Age <- min_Age
summary_info$max_Age <- max_Age
max_Age <- maternal_risk %>%
filter(Age == max(Age, na.rm = TRUE)) %>%
select(Age)
summary_info <- list()
summary_info$min_Age <- min_Age
summary_info$max_Age <- max_Age
summary_info$avg_age <- avg_age
summary_info$avg_BS <- avg_BS
summary_info$avg_HeartRate <- avg_HeartRate
summary_info$RiskLevel <- RiskLevel
View(summary_info)
summary_info <- list()
summary_info$min_Age <- min_Age
summary_info$max_Age <- max_Age
summary_info$avg_age <- avg_age
summary_info$avg_BS <- avg_BS
summary_info$avg_HeartRate <- avg_HeartRate
View()
summary_info <- list()
summary_info$min_Age <- min_Age
summary_info$max_Age <- max_Age
summary_info$avg_age <- avg_age
summary_info$avg_BS <- avg_BS
summary_info$avg_HeartRate <- avg_HeartRate
View()
summary_info <- list()
summary_info$num_observations <- nrow(maternal_risk)
summary_info$min_Age <- min_Age
summary_info$max_Age <- max_Age
summary_info$avg_age <- avg_age
summary_info$avg_BS <- avg_BS
summary_info$avg_HeartRate <- avg_HeartRate
install.package("knitr")
install.packages("knitr")
library(knitr)
min_Age <- maternal_risk %>%
select(Age) %>%
filter(Age == min(Age, na.rm = TRUE)) %>%
View(min_Age)
avg_age <- round(
(sum(maternal_risk$`# of Age`))
)
View(maternal_risk)
maternal_df <- maternal_risk %>%
group_by(Age) %>%
summarize(min_Age = min(Age),
max_Age = max(Age),
avg_age = mean(Age),
avg_BS = mean(BS),
avg_HeartRate = mean(HeartRate),
.groups = 'drop'
)
maternal_df
maternal_group <- maternal_risk %>%
group_by(Age)
View(maternal_group)
View(maternal_df)
maternal_df <- maternal_risk %>%
select("Age", "BP", "HeartRate") %>%
group_by(Age) %>%
summarize(min_Age = min(Age),
max_Age = max(Age),
avg_age = mean(Age),
avg_BS = mean(BS),
avg_HeartRate = mean(HeartRate),
.groups = 'drop'
)
maternal_df <- maternal_risk %>%
select("Age", "BS", "HeartRate") %>%
group_by(Age) %>%
summarize(min_Age = min(Age),
max_Age = max(Age),
avg_age = mean(Age),
avg_BS = mean(BS),
avg_HeartRate = mean(HeartRate),
.groups = 'drop'
)
View(maternal_df)
avg_age
avg_age <- maternal_risk %>%
select(Age) %>%
summarize(mean = mean(Age))
avg_age
summary_info %>%
mutate_if(is.numeric, round)
summary_info[] <- lapply(summary_info, round, 1)
summary_info
min_Age <- maternal_risk %>%
filter(Age == min(Age, na.rm = TRUE)) %>%
select(Age)
summary_info[] <- lapply(summary_info, round)
summary_info
min_Age <- maternal_risk %>%
filter(Age == min(Age, na.rm = TRUE)) %>%
select(Age)
